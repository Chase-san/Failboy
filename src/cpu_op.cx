/* **************************************** */
/* 8-bit loads */
static inline void LD_A_n(registers_t *r) { r->A = next8(r); }
static inline void LD_B_n(registers_t *r) { r->B = next8(r); }
static inline void LD_C_n(registers_t *r) { r->C = next8(r); }
static inline void LD_D_n(registers_t *r) { r->D = next8(r); }
static inline void LD_E_n(registers_t *r) { r->E = next8(r); }
static inline void LD_H_n(registers_t *r) { r->H = next8(r); }
static inline void LD_L_n(registers_t *r) { r->L = next8(r); }
static inline void LD_aHL_n(registers_t *r) { write(r->HL, next8(r)); }

static inline void LD_A_A(registers_t *r) { r->A = r->A; }
static inline void LD_A_B(registers_t *r) { r->A = r->B; }
static inline void LD_A_C(registers_t *r) { r->A = r->C; }
static inline void LD_A_D(registers_t *r) { r->A = r->D; }
static inline void LD_A_E(registers_t *r) { r->A = r->E; }
static inline void LD_A_H(registers_t *r) { r->A = r->H; }
static inline void LD_A_L(registers_t *r) { r->A = r->L; }
static inline void LD_A_aHL(registers_t *r) { r->A = read(r->HL); }

static inline void LD_A_aC(registers_t *r) { r->A = read(r->C + 0xFF00); }
static inline void LD_aC_A(registers_t *r) { write(r->C + 0xFF00, r->A); }

static inline void LD_A_aBC(registers_t *r) { r->A = read(r->BC); }
static inline void LD_A_aDE(registers_t *r) { r->A = read(r->DE); }
static inline void LD_A_ann(registers_t *r) { r->A = read(next16(r)); }

static inline void LD_B_A(registers_t *r) { r->B = r->A; }
static inline void LD_B_B(registers_t *r) { r->B = r->B; }
static inline void LD_B_C(registers_t *r) { r->B = r->C; }
static inline void LD_B_D(registers_t *r) { r->B = r->D; }
static inline void LD_B_E(registers_t *r) { r->B = r->E; }
static inline void LD_B_H(registers_t *r) { r->B = r->H; }
static inline void LD_B_L(registers_t *r) { r->B = r->L; }
static inline void LD_B_aHL(registers_t *r) { r->B = read(r->HL); }

static inline void LD_C_A(registers_t *r) { r->C = r->A; }
static inline void LD_C_B(registers_t *r) { r->C = r->B; }
static inline void LD_C_C(registers_t *r) { r->C = r->C; }
static inline void LD_C_D(registers_t *r) { r->C = r->D; }
static inline void LD_C_E(registers_t *r) { r->C = r->E; }
static inline void LD_C_H(registers_t *r) { r->C = r->H; }
static inline void LD_C_L(registers_t *r) { r->C = r->L; }
static inline void LD_C_aHL(registers_t *r) { r->C = read(r->HL); }

static inline void LD_D_A(registers_t *r) { r->D = r->A; }
static inline void LD_D_B(registers_t *r) { r->D = r->B; }
static inline void LD_D_C(registers_t *r) { r->D = r->C; }
static inline void LD_D_D(registers_t *r) { r->D = r->D; }
static inline void LD_D_E(registers_t *r) { r->D = r->E; }
static inline void LD_D_H(registers_t *r) { r->D = r->H; }
static inline void LD_D_L(registers_t *r) { r->D = r->L; }
static inline void LD_D_aHL(registers_t *r) { r->D = read(r->HL); }

static inline void LD_E_A(registers_t *r) { r->E = r->A; }
static inline void LD_E_B(registers_t *r) { r->E = r->B; }
static inline void LD_E_C(registers_t *r) { r->E = r->C; }
static inline void LD_E_D(registers_t *r) { r->E = r->D; }
static inline void LD_E_E(registers_t *r) { r->E = r->E; }
static inline void LD_E_H(registers_t *r) { r->E = r->H; }
static inline void LD_E_L(registers_t *r) { r->E = r->L; }
static inline void LD_E_aHL(registers_t *r) { r->E = read(r->HL); }

static inline void LD_H_A(registers_t *r) { r->H = r->A; }
static inline void LD_H_B(registers_t *r) { r->H = r->B; }
static inline void LD_H_C(registers_t *r) { r->H = r->C; }
static inline void LD_H_D(registers_t *r) { r->H = r->D; }
static inline void LD_H_E(registers_t *r) { r->H = r->E; }
static inline void LD_H_H(registers_t *r) { r->H = r->H; }
static inline void LD_H_L(registers_t *r) { r->H = r->L; }
static inline void LD_H_aHL(registers_t *r) { r->H = read(r->HL); }

static inline void LD_L_A(registers_t *r) { r->L = r->A; }
static inline void LD_L_B(registers_t *r) { r->L = r->B; }
static inline void LD_L_C(registers_t *r) { r->L = r->C; }
static inline void LD_L_D(registers_t *r) { r->L = r->D; }
static inline void LD_L_E(registers_t *r) { r->L = r->E; }
static inline void LD_L_H(registers_t *r) { r->L = r->H; }
static inline void LD_L_L(registers_t *r) { r->L = r->L; }
static inline void LD_L_aHL(registers_t *r) { r->L = read(r->HL); }

static inline void LD_aHL_A(registers_t *r) { write(r->HL, r->A); }
static inline void LD_aHL_B(registers_t *r) { write(r->HL, r->B); }
static inline void LD_aHL_C(registers_t *r) { write(r->HL, r->C); }
static inline void LD_aHL_D(registers_t *r) { write(r->HL, r->D); }
static inline void LD_aHL_E(registers_t *r) { write(r->HL, r->E); }
static inline void LD_aHL_H(registers_t *r) { write(r->HL, r->H); }
static inline void LD_aHL_L(registers_t *r) { write(r->HL, r->L); }

static inline void LD_aBC_A(registers_t *r) { write(r->BC, r->A); }
static inline void LD_aDE_A(registers_t *r) { write(r->DE, r->A); }
static inline void LD_ann_A(registers_t *r) { write(next16(r), r->A); }

static inline void LDD_A_aHL(registers_t *r) { r->A = read(r->HL--); }
static inline void LDD_aHL_A(registers_t *r) { write(r->HL--, r->A); }

static inline void LDI_A_aHL(registers_t *r) { r->A = read(r->HL++); }
static inline void LDI_aHL_A(registers_t *r) { write(r->HL++, r->A); }

static inline void LDH_A_an(registers_t *r) { r->A = read(0xFF00 + next8(r)); }
static inline void LDH_an_A(registers_t *r) { write(0xFF00 + next8(r), r->A); }


/* **************************************** */
/* 16-bit loads */

static inline void LD_BC_nn(registers_t *r) { r->BC = next16(r); }
static inline void LD_DE_nn(registers_t *r) { r->DE = next16(r); }
static inline void LD_HL_nn(registers_t *r) { r->HL = next16(r); }
static inline void LD_SP_nn(registers_t *r) { r->SP = next16(r); }

static inline void LD_SP_HL(registers_t *r) { r->SP = r->HL; }

static inline void LDHL_SP_n(registers_t *r) {
	/* lovely flags */
	t8 = next8(r);
	r->HL = r->SP + (int8_t)t8;
	r->F = 0;
	r->F_H = ((r->SP ^ t8 ^ r->HL) & 0x10) == 0x10;
	r->F_C = ((r->SP ^ t8 ^ r->HL) & 0x100) == 0x100;
}

static inline void LD_ann_SP(registers_t *r) { write16(next16(r), r->SP); }

static inline void PUSH16(registers_t *r, uint16_t n) {
	write16(r->SP, n);
	r->SP -= 2;
}
static inline void PUSH_AF(registers_t *r) { PUSH16(r,r->AF); }
static inline void PUSH_BC(registers_t *r) { PUSH16(r,r->BC); }
static inline void PUSH_DE(registers_t *r) { PUSH16(r,r->DE); }
static inline void PUSH_HL(registers_t *r) { PUSH16(r,r->HL); }

static inline uint16_t POP16(registers_t *r) {
	t16 = read16(r->SP);
	r->SP += 2;
	return t16;
}

static inline void POP_AF(registers_t *r) { r->AF = POP16(r); }
static inline void POP_BC(registers_t *r) { r->BC = POP16(r); }
static inline void POP_DE(registers_t *r) { r->DE = POP16(r); }
static inline void POP_HL(registers_t *r) { r->HL = POP16(r); }

/* **************************************** */
/* 8-bit Arithmetic (ALU8) */

/* These are a PITA because of all the flags */
static inline void ADD(registers_t *r, uint8_t n) {
	t16 = r->A + n;
	r->F = 0;
	r->F_N = 0;
	r->F_Z = t16 == 0;
	r->F_H = ((r->A ^ n ^ t16) & 0x10) == 0x10;
	r->F_C = ((r->A ^ n ^ t16) & 0x100) == 0x100;
	r->A = t16;
}
static inline void ADD_A_A(registers_t *r) { ADD(r, r->A); }
static inline void ADD_A_B(registers_t *r) { ADD(r, r->B); }
static inline void ADD_A_C(registers_t *r) { ADD(r, r->C); }
static inline void ADD_A_D(registers_t *r) { ADD(r, r->D); }
static inline void ADD_A_E(registers_t *r) { ADD(r, r->E); }
static inline void ADD_A_H(registers_t *r) { ADD(r, r->H); }
static inline void ADD_A_L(registers_t *r) { ADD(r, r->L); }
static inline void ADD_A_aHL(registers_t *r) { ADD(r, read(r->HL)); }
static inline void ADD_A_n(registers_t *r) { ADD(r, next8(r)); }

static inline void ADC_A_A(registers_t *r) { ADD(r, r->A + r->F_C); }
static inline void ADC_A_B(registers_t *r) { ADD(r, r->B + r->F_C); }
static inline void ADC_A_C(registers_t *r) { ADD(r, r->C + r->F_C); }
static inline void ADC_A_D(registers_t *r) { ADD(r, r->D + r->F_C); }
static inline void ADC_A_E(registers_t *r) { ADD(r, r->E + r->F_C); }
static inline void ADC_A_H(registers_t *r) { ADD(r, r->H + r->F_C); }
static inline void ADC_A_L(registers_t *r) { ADD(r, r->L + r->F_C); }
static inline void ADC_A_aHL(registers_t *r) { ADD(r, read(r->HL) + r->F_C); }
static inline void ADC_A_n(registers_t *r) { ADD(r, next8(r) + r->F_C); }


static inline void SUB(registers_t *r, uint8_t n) {
	t16 = r->A - n;
	r->F = 0;
	r->F_N = 1;
	r->F_Z = t16 == 0;
	r->F_H = (r->A & 0xF) >= (n & 0xF);
	r->F_C = r->A >= n;
	r->A = t16;
}

static inline void SUB_A(registers_t *r) { SUB(r, r->A); }
static inline void SUB_B(registers_t *r) { SUB(r, r->B); }
static inline void SUB_C(registers_t *r) { SUB(r, r->C); }
static inline void SUB_D(registers_t *r) { SUB(r, r->D); }
static inline void SUB_E(registers_t *r) { SUB(r, r->E); }
static inline void SUB_H(registers_t *r) { SUB(r, r->H); }
static inline void SUB_L(registers_t *r) { SUB(r, r->L); }
static inline void SUB_aHL(registers_t *r) { SUB(r, read(r->HL)); }
static inline void SUB_n(registers_t *r) { SUB(r, next8(r)); }

static inline void SBC_A_A(registers_t *r) { SUB(r, r->A + r->F_C); }
static inline void SBC_A_B(registers_t *r) { SUB(r, r->B + r->F_C); }
static inline void SBC_A_C(registers_t *r) { SUB(r, r->C + r->F_C); }
static inline void SBC_A_D(registers_t *r) { SUB(r, r->D + r->F_C); }
static inline void SBC_A_E(registers_t *r) { SUB(r, r->E + r->F_C); }
static inline void SBC_A_H(registers_t *r) { SUB(r, r->H + r->F_C); }
static inline void SBC_A_L(registers_t *r) { SUB(r, r->L + r->F_C); }
static inline void SBC_A_aHL(registers_t *r) { SUB(r, read(r->HL) + r->F_C); }
static inline void SBC_A_n(registers_t *r) { SUB(r, next8(r) + r->F_C); }

static inline void AND(registers_t *r, uint8_t n) {
	r->A &= n;
	r->F = 0;
	r->F_H = 1;
	r->F_Z = r->A == 0;
}
static inline void AND_A(registers_t *r) { AND(r, r->A); }
static inline void AND_B(registers_t *r) { AND(r, r->B); }
static inline void AND_C(registers_t *r) { AND(r, r->C); }
static inline void AND_D(registers_t *r) { AND(r, r->D); }
static inline void AND_E(registers_t *r) { AND(r, r->E); }
static inline void AND_H(registers_t *r) { AND(r, r->H); }
static inline void AND_L(registers_t *r) { AND(r, r->L); }
static inline void AND_aHL(registers_t *r) { AND(r, read(r->HL)); }
static inline void AND_n(registers_t *r) { AND(r, next8(r)); }

static inline void OR(registers_t *r, uint8_t n) {
	r->A |= n;
	r->F = 0;
	r->F_Z = r->A == 0;
}
static inline void OR_A(registers_t *r) { OR(r, r->A); }
static inline void OR_B(registers_t *r) { OR(r, r->B); }
static inline void OR_C(registers_t *r) { OR(r, r->C); }
static inline void OR_D(registers_t *r) { OR(r, r->D); }
static inline void OR_E(registers_t *r) { OR(r, r->E); }
static inline void OR_H(registers_t *r) { OR(r, r->H); }
static inline void OR_L(registers_t *r) { OR(r, r->L); }
static inline void OR_aHL(registers_t *r) { OR(r, read(r->HL)); }
static inline void OR_n(registers_t *r) { OR(r, next8(r)); }

static inline void XOR(registers_t *r, uint8_t n) {
	r->A |= n;
	r->F = 0;
	r->F_Z = r->A == 0;
}
static inline void XOR_A(registers_t *r) { XOR(r, r->A); }
static inline void XOR_B(registers_t *r) { XOR(r, r->B); }
static inline void XOR_C(registers_t *r) { XOR(r, r->C); }
static inline void XOR_D(registers_t *r) { XOR(r, r->D); }
static inline void XOR_E(registers_t *r) { XOR(r, r->E); }
static inline void XOR_H(registers_t *r) { XOR(r, r->H); }
static inline void XOR_L(registers_t *r) { XOR(r, r->L); }
static inline void XOR_aHL(registers_t *r) { XOR(r, read(r->HL)); }
static inline void XOR_n(registers_t *r) { XOR(r, next8(r)); }

static inline void CP(registers_t *r, uint8_t n) {
	t16 = r->A - n;
	r->F = 0;
	r->F_N = 1;
	r->F_Z = t16 == 0;
	r->F_H = (r->A & 0xF) >= (n & 0xF);
	r->F_C = r->A >= n;
}
static inline void CP_A(registers_t *r) { CP(r, r->A); }
static inline void CP_B(registers_t *r) { CP(r, r->B); }
static inline void CP_C(registers_t *r) { CP(r, r->C); }
static inline void CP_D(registers_t *r) { CP(r, r->D); }
static inline void CP_E(registers_t *r) { CP(r, r->E); }
static inline void CP_H(registers_t *r) { CP(r, r->H); }
static inline void CP_L(registers_t *r) { CP(r, r->L); }
static inline void CP_aHL(registers_t *r) { CP(r, read(r->HL)); }
static inline void CP_n(registers_t *r) { CP(r, next8(r)); }

static inline void INC(registers_t *r, uint8_t n) {
	r->F_N = 0;
	r->F_H = (n & 0xf) == 0;
	r->F_Z = n == 0;
}
static inline void INC_A(registers_t *r) { INC(r, ++r->A); }
static inline void INC_B(registers_t *r) { INC(r, ++r->B); }
static inline void INC_C(registers_t *r) { INC(r, ++r->C); }
static inline void INC_D(registers_t *r) { INC(r, ++r->D); }
static inline void INC_E(registers_t *r) { INC(r, ++r->E); }
static inline void INC_H(registers_t *r) { INC(r, ++r->H); }
static inline void INC_L(registers_t *r) { INC(r, ++r->L); }
static inline void INC_aHL(registers_t *r) { t8 = read(r->HL) + 1; write(r->HL, t8); INC(r, t8); }

static inline void DEC(registers_t *r, uint8_t n) {
	r->F_N = 1;
	r->F_H = (n & 0xf) != 0xf;
	r->F_Z = n == 0;
}
static inline void DEC_A(registers_t *r) { DEC(r, ++r->A); }
static inline void DEC_B(registers_t *r) { DEC(r, ++r->B); }
static inline void DEC_C(registers_t *r) { DEC(r, ++r->C); }
static inline void DEC_D(registers_t *r) { DEC(r, ++r->D); }
static inline void DEC_E(registers_t *r) { DEC(r, ++r->E); }
static inline void DEC_H(registers_t *r) { DEC(r, ++r->H); }
static inline void DEC_L(registers_t *r) { DEC(r, ++r->L); }
static inline void DEC_aHL(registers_t *r) { t8 = read(r->HL) + 1; write(r->HL, t8); DEC(r, t8); }


/* **************************************** */
/* 16-bit Arithmetic (ALU16) */
static inline void ADD_HL(registers_t *r, uint16_t n) {
	t32 = r->HL + n;
	r->F_N = 0;
	r->F_H = ((r->HL ^ n ^ t32) & 0x1000) == 0x1000;
	r->F_C = ((r->HL ^ n ^ t32) & 0x10000) == 0x10000;
	r->HL = t32;
}
static inline void ADD_HL_BC(registers_t *r) { ADD_HL(r,r->BC); }
static inline void ADD_HL_DE(registers_t *r) { ADD_HL(r,r->DE); }
static inline void ADD_HL_HL(registers_t *r) { ADD_HL(r,r->HL); }
static inline void ADD_HL_SP(registers_t *r) { ADD_HL(r,r->SP); }

static inline void ADD_SP_n(registers_t *r) {
	t8 = next8(r);
	t32 = r->SP + (int8_t)t8;
	r->F = 0;
	r->F_H = ((r->SP ^ t8 ^ t32) & 0x10) == 0x10;
	r->F_C = ((r->SP ^ t8 ^ t32) & 0x100) == 0x100;
}

static inline void INC_BC(registers_t *r) { ++r->BC; }
static inline void INC_DE(registers_t *r) { ++r->DE; }
static inline void INC_HL(registers_t *r) { ++r->HL; }
static inline void INC_SP(registers_t *r) { ++r->SP; }

static inline void DEC_BC(registers_t *r) { --r->BC; }
static inline void DEC_DE(registers_t *r) { --r->DE; }
static inline void DEC_HL(registers_t *r) { --r->HL; }
static inline void DEC_SP(registers_t *r) { --r->SP; }

/* **************************************** */
/* Rotates & Shifts */
static inline void RLCA(registers_t *r) {  }
static inline void RLA(registers_t *r) {  }
static inline void RRCA(registers_t *r) {  }
static inline void RRA(registers_t *r) {  }


/* **************************************** */
/* Jumps */
static inline void JP(registers_t *r) { r->PC = next16(r); }
static inline void JP_NZ(registers_t *r) { if(!r->F_Z) { r->PC = next16(r); } }
static inline void JP_Z(registers_t *r) { if(r->F_Z) { r->PC = next16(r); } }
static inline void JP_NC(registers_t *r) { if(!r->F_C) { r->PC = next16(r); } }
static inline void JP_C(registers_t *r) { if(r->F_C) { r->PC = next16(r); } }

static inline void JP_HL(registers_t *r) { r->PC = r->HL; }
static inline void JR_n(registers_t *r) { r->PC += (int8_t)next8(r); }

static inline void JR_NZ_n(registers_t *r) { if(!r->F_Z) { JR_n(r); } }
static inline void JR_Z_n(registers_t *r) { if(r->F_Z) { JR_n(r); } }
static inline void JR_NC_n(registers_t *r) { if(!r->F_C) { JR_n(r); } }
static inline void JR_C_n(registers_t *r) { if(r->F_C) { JR_n(r); } }

/* **************************************** */
/* Calls */
static inline void CALL_nn(registers_t *r) { PUSH16(r, r->PC + 1); r->PC = next16(r); }

static inline void CALL_NZ_nn(registers_t *r) { if(!r->F_Z) { PUSH16(r, r->PC + 1); r->PC = next16(r); } }
static inline void CALL_Z_nn(registers_t *r) { if(r->F_Z) { PUSH16(r, r->PC + 1); r->PC = next16(r); } }
static inline void CALL_NC_nn(registers_t *r) { if(!r->F_C) { PUSH16(r, r->PC + 1); r->PC = next16(r); } }
static inline void CALL_C_nn(registers_t *r) { if(r->F_C) { PUSH16(r, r->PC + 1); r->PC = next16(r); } }

/* **************************************** */
/* Restarts */
static inline void RST00(registers_t *r) { r->PC = 0x00; }
static inline void RST08(registers_t *r) { r->PC = 0x08; }
static inline void RST10(registers_t *r) { r->PC = 0x10; }
static inline void RST18(registers_t *r) { r->PC = 0x18; }
static inline void RST20(registers_t *r) { r->PC = 0x20; }
static inline void RST28(registers_t *r) { r->PC = 0x28; }
static inline void RST30(registers_t *r) { r->PC = 0x30; }
static inline void RST38(registers_t *r) { r->PC = 0x38; }

/* **************************************** */
/* Misc */
static inline void CPL(registers_t *r) { r->F_N = 1; r->F_H = 1; r->A ^= 0xFF; }
static inline void CCF(registers_t *r) { r->F_N = r->F_H = 0; r->F_C ^= 1; r->A ^= 0xFF; }
static inline void SCF(registers_t *r) { r->F_N = r->F_H = 0; r->F_C = 1; }
static inline void DAA(registers_t *r) { }
static inline void HALT(registers_t *r) { }
static inline void STOP(registers_t *r) { next8(r); }

static inline void DI(registers_t *r) { }
static inline void EI(registers_t *r) { }

/* **************************************** */
/* Return */
static inline void RET(registers_t *r) { r->PC = POP16(r); }

static inline void RET_NZ(registers_t *r) { if(!r->F_Z) { RET(r); } }
static inline void RET_Z(registers_t *r) { if(r->F_Z) { RET(r); } }
static inline void RET_NC(registers_t *r) { if(!r->F_C) { RET(r); } }
static inline void RET_C(registers_t *r) { if(r->F_C) { RET(r); } }

static inline void RETI(registers_t *r) { RET(r); EI(r); }



